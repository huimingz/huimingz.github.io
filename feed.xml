<feed xmlns="http://www.w3.org/2005/Atom"> <id>http://blog.huimingz.com/</id><title>Ming</title><subtitle>努力的人总会发光的吧！// 个人博客</subtitle> <updated>2022-06-14T11:10:36+08:00</updated> <author> <name>huimingz</name> <uri>http://blog.huimingz.com/</uri> </author><link rel="self" type="application/atom+xml" href="http://blog.huimingz.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="http://blog.huimingz.com/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2022 huimingz </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>在apple M1上构建x86_64 Docker镜像</title><link href="http://blog.huimingz.com/posts/docker-build-x86-image-on-apple-m1/" rel="alternate" type="text/html" title="在apple M1上构建x86_64 Docker镜像" /><published>2022-01-06T10:00:00+08:00</published> <updated>2022-01-06T10:00:00+08:00</updated> <id>http://blog.huimingz.com/posts/docker-build-x86-image-on-apple-m1/</id> <content src="http://blog.huimingz.com/posts/docker-build-x86-image-on-apple-m1/" /> <author> <name>huimingz</name> </author> <category term="docker" /> <summary> 默认通过docker build方式构建的镜像时arm64的版本，可以通过docker inspect IMAGE_ID查看到 # docker image inspect 0382b9b17bdb { ... "Architecture": "arm64", "Variant": "v8", "Os": "linux", "Size": 223036168, "VirtualSize": 223036168, ... } 这样的镜像时没有办法在Intel x86/64的容器服务中运行的，我们可以选择基于arm版本服务器的容器服务，更好的选择是在M1上编译 x86架构的容器镜像。 Docker Desktop for Mac M1中集成了一个buildx的工具，可以方便我们编译各种跨平台的容器镜像 ... </summary> </entry> <entry><title>Golang Proxy设置</title><link href="http://blog.huimingz.com/posts/golang-goproxy/" rel="alternate" type="text/html" title="Golang Proxy设置" /><published>2021-07-26T22:22:10+08:00</published> <updated>2021-07-26T22:22:10+08:00</updated> <id>http://blog.huimingz.com/posts/golang-goproxy/</id> <content src="http://blog.huimingz.com/posts/golang-goproxy/" /> <author> <name>huimingz</name> </author> <category term="Golang" /> <summary> 重置GOPROXY: go env -w GOPROXY=https://proxy.golang.org,direct </summary> </entry> <entry><title>IDE的那些事</title><link href="http://blog.huimingz.com/posts/IDE-Tips/" rel="alternate" type="text/html" title="IDE的那些事" /><published>2021-03-08T21:34:10+08:00</published> <updated>2021-03-08T21:34:10+08:00</updated> <id>http://blog.huimingz.com/posts/IDE-Tips/</id> <content src="http://blog.huimingz.com/posts/IDE-Tips/" /> <author> <name>huimingz</name> </author> <category term="other" /> <summary> 记下那些日常使用IDE工具的坑和技巧。 Goland 重建缓存 最近遇到了莫名爆红的情况，提示 Unresolved reference ，运行OK的。 解决办法：编辑器的 File 菜单下有个 invalidate caches 选项，清除编辑器的缓存并重建项目索引。 参考：Goland 提示 Unresolved reference 错误解决 </summary> </entry> <entry><title>工具即生产力（收集）</title><link href="http://blog.huimingz.com/posts/tools-are-productivity/" rel="alternate" type="text/html" title="工具即生产力（收集）" /><published>2021-03-07T16:32:11+08:00</published> <updated>2021-03-28T14:04:21+08:00</updated> <id>http://blog.huimingz.com/posts/tools-are-productivity/</id> <content src="http://blog.huimingz.com/posts/tools-are-productivity/" /> <author> <name>huimingz</name> </author> <category term="other" /> <summary> 那些实用的工具们。 开发 GitHub Skyline https://skyline.github.com/ GitHub 官方出品，将你过去一年的提交统计转成一个三维的直方图，并且提供 stl 文件下载，进行 3D 打印。 github1s https://github.com/conwnet/github1s 只要在 GitHub 仓库域名后面加上1s，比如github1s.com/facebook/react，就能在浏览器里面使用 VS Code 环境，浏览这个仓库的代码。 Swagger 文档导出 https://www.docs4dev.com/tools/zh/swagger2markup/ 一个在线工具，可以将 Swagger 文档（yaml 或者 json 格式）导出为PDF、Markdown、EPUB、HTML 等格式。 X6 https... </summary> </entry> <entry><title>Golang test中如何使用setUp和tearDown</title><link href="http://blog.huimingz.com/posts/golang-test-setup-and-teardown/" rel="alternate" type="text/html" title="Golang test中如何使用setUp和tearDown" /><published>2021-02-21T09:58:00+08:00</published> <updated>2021-02-21T09:58:00+08:00</updated> <id>http://blog.huimingz.com/posts/golang-test-setup-and-teardown/</id> <content src="http://blog.huimingz.com/posts/golang-test-setup-and-teardown/" /> <author> <name>huimingz</name> </author> <category term="Golang" /> <summary> 在进行单元测试时，我们有些时候需要在执行前和执行后做一些工作，比如准备测试数据，测试结束后的测试数据清理。 包范围的准备和清理 在Golang中并没有直接提供setUp和tearDown，单我们可以利用 TestMain(m *testing.M) 来实现： package foo import ( "os" "testing" ) func TestMain(m *testing.M) { // 退出状态码 var exitCode int defer func() { os.Exit(exitCode) }() // 准备和清理工作 setUp() defer tearDown() exitCode= m.Run() } func setUp() { println("SetUp called") } func tearDown() {... </summary> </entry> </feed>
